[BITS 16]
[ORG 0x7C00]
%INCLUDE "src/locations.h"

BPB:
SHORT_JUMP:
	JMP SHORT START
	NOP
OEM: DB "FDOS    "
BYTES_PER_SECTOR: DW 512
SECTORS_PER_CLUSTER: DB 1
RESERVED_SECTORS: DW 1
NUMBER_OF_FAT: DB 2
ROOT_ENTRIES: DW 224
SECTOR_COUNT: DW 2880
MEDIA_DESCRIPTOR: DB 0xF0
SECTORS_PER_FAT: DW 9
SECTORS_PER_TRACK: DW 18
HEAD_COUNT: DW 2
HIDDEN_SECTORS: DD 0
LARGE_SECTOR_COUNT: DD 0

EBR:
DRIVE_NUMBER: DB 0
RESERVED: DB 0
SIGNATURE: DB 0x29
VOLUME_ID: DD 0xFFDD0055
VOLUME_LABEL: DB "FDOS       "
IDENTIFIER_STRING: DB "FAT12   "

START:
	JMP 0x0000:ENFORCE_CS

ENFORCE_CS:
	XOR AX, AX
	MOV DS, AX
	MOV SS, AX
	MOV BP, 0x7C00
	MOV SP, BP

	MOV BYTE[DRIVE_NUMBER], DL ; Store the drive number from the BIOS.
	INT 0x13 ; Reset drive head.

	MOV AH, 0x08
	INT 0x13 ; Get diskette info.

	MOVZX AX, CL
	AND AL, 0x3F
	MOV WORD[SECTORS_PER_TRACK], AX

	INC DH
	SHR DX, 8
	MOV WORD[HEAD_COUNT], DX

	XOR SI, SI
	MOV ES, SI

	MOV SI, LOADING_MSG
	CALL PUTS

	MOV DH, BYTE[NUMBER_OF_FAT]
	MOV CX, WORD[SECTORS_PER_FAT]

	MOV AX, WORD[RESERVED_SECTORS]
	MOV BX, FILESYSTEM
	MOV DL, BYTE[DRIVE_NUMBER]

READ_FAT_LOOP: ; In case the first fat table is broken try to load the redundant ones.
	CALL READ_DISK
	JNC .OK

	ADD AX, CX

	DEC DH
	JZ ERROR
	JMP READ_FAT_LOOP

.OK:
	MOVZX AX, BYTE[NUMBER_OF_FAT]
	MUL WORD[SECTORS_PER_FAT]
	PUSH AX

	ADD AX, WORD[RESERVED_SECTORS]

	MOV BX, CX 
	SHL BX, 9
	ADD BX, FILESYSTEM
	MOV WORD[ROOT_DIR_LOC], BX

	MOV CX, WORD[ROOT_ENTRIES]
	SHL CX, 5
	ADD CX, 511
	SHR CX, 9
	PUSH CX

	MOV DL, BYTE[DRIVE_NUMBER]

	CALL READ_DISK
	JC ERROR

	MOV AX, WORD[BX + 26] ; Get the first sector of the DOS.SYS file.
	MOV WORD[EXPLORER_FIRST_SECTOR], AX

	POP DI 
	POP AX
	ADD DI, WORD[RESERVED_SECTORS]
	ADD DI, AX

	MOV AX, WORD[EXPLORER_FIRST_SECTOR]
	MOV BX, DOS_OFFSET 

	MOV SI, LOADING_MSG
	CALL PUTS

READ_DOS:
	PUSH AX

	SUB AX, 2
	MOVZX CX, BYTE[SECTORS_PER_CLUSTER]
	MUL CX

	ADD AX, DI
	MOV CL, BYTE[SECTORS_PER_CLUSTER]
	MOV DL, BYTE[DRIVE_NUMBER]
	MOV SI, DOS_SEGMENT
	MOV ES, SI
	CALL READ_DISK
	JC ERROR

	MOVZX AX, CL
	MUL WORD[BYTES_PER_SECTOR]

	ADD BX, AX 

	POP AX
	PUSH BX

	MOV BX, FILESYSTEM >> 4
	MOV ES, BX

	MOV BX, AX
	SHR BX, 1
	ADD BX, AX

	TEST AX, 1
	MOV AX, WORD[ES:BX]
	JZ EVEN_CLUSTER
	
	SHR AX, 4 
	JMP ODD_CLUSTER

EVEN_CLUSTER:
	AND AX, 0x0FFF

ODD_CLUSTER:
	POP BX

	CMP AX, 0xFF8
	JL READ_DOS

	MOV DX, WORD[ROOT_DIR_LOC]

	MOV SI, DOS_SEGMENT
	MOV DS, SI

	JMP DOS_SEGMENT:DOS_OFFSET

ERROR:
	MOV SI, ERROR_MSG ; Print the error message.
	CALL PUTS

	MOV AH, 0x01
	INT 0x13

	MOV BL, AH
	CALL PUTH8

	MOV AH, 0x00
	INT 0x16 ; Wait for a key to be pressed.

	JMP 0xFFFF:0x0000 ; Reboot.

; AX <- LBA value.
; CL <- Number of sectors to read.
; DL <- Drive number.
; ES:BX <- Pointer to buffer.
READ_DISK:
	PUSHA
	PUSH ES

	MOVZX DI, CL

.READ_LOOP:
	CALL LBA_TO_CHS
	CALL READ_CHS
	JC .RETURN

	MOV SI, ES
	ADD SI, 32
	MOV ES, SI

	INC AX
	DEC DI
	JNZ .READ_LOOP

.RETURN:
	POP ES
	POPA
	RET

; ES:BX <- Pointer to target buffer.
; CX[0:5] <- Sector number.
; CX[6:15] <- Track/Cylinder.
; DH <- Head number.
; DL <- Drive number.
READ_CHS:
	PUSH DI
	MOV DI, 3

.READ_LOOP:
	STC
	PUSH AX
	MOV AH, 0x02
	MOV AL, 1
	INT 0x13
	POP AX
	JNC .OUT

	DEC DI
	JNZ .READ_LOOP
	STC

.OUT:
	POP DI
	RET

; AX <- LBA value.
;
; CX[0:5] -> Sector number.
; CX[6:15] -> Track/Cylinder.
; DH -> Head number.
LBA_TO_CHS:
	PUSH AX
	PUSH DX

	XOR DX, DX
	DIV WORD[SECTORS_PER_TRACK]
	INC DX
	MOV CL, DL ; Get the sector number.

	XOR DX, DX
	DIV WORD[HEAD_COUNT]
	MOV DH, DL ; Get the head number.

	MOV CH, AL
	SHL AH, 6
	OR CL, AH ; Get the number of tracks/cylinders.

	POP AX
	MOV DL, AL
	POP AX
	RET

; SI <- Pointer to string.
PUTS:
	PUSH AX
	PUSH SI
	MOV AH, 0x0E

.LOOP:
	LODSB
	TEST AL, AL
	JZ SHORT .RETURN
	INT 0x10
	JMP SHORT .LOOP

.RETURN:
	POP SI
	POP AX
	RET

; BL <- Value to print.
PUTH8:
	PUSH AX
	PUSH CX
	MOV AH, 0x0E
	MOV CX, 2

.LOOP:
	ROL BL, 4
	MOV AL, BL
	AND AL, 0x0F

	CMP AL, 10
	SBB AL, 0x69
	DAS

	INT 0x10

	DEC CX
	JNZ .LOOP

	POP CX
	POP AX
	RET

EXPLORER_FIRST_SECTOR: DW 0
ROOT_DIR_LOC: DW 0

LOADING_MSG: DB "Loading system...", 0x0A, 0x0D, 0x00
ERROR_MSG: DB "Disk error -> 0x", 0x00

TIMES 510 - ($ - $$) DB 0
DW 0xAA55
