[BITS 16]
[ORG 0x0000]

%DEFINE SELECTED_ATTRIBUTE 0xE0
%DEFINE MINE_AMOUNT 200

	MOV AX, 0x1003
        MOV BL, 0x00
        INT 0x10 ; Turn off blinking attribute.

	MOV AX, 0x0001
	INT 0x10 ; Set to 40x25 with 16 colours.

	MOV AH, 0x01
        MOV CX, 0x2607
        INT 0x10 ; Make the cursor invisible.

	MOV AH, 0x00
        INT 0x1A ; Get the number of clock ticks since midnight.

	ADD DX, CX
	MOV WORD[SEED], DX

	XOR AL, AL
	MOV BX, FIELD_EMPTY_START
	MOV CX, 40 * 24 - (FIELD_EMPTY_START - FIELD)
	CALL MEMSET

	MOV CX, MINE_AMOUNT
	MOV BX, 960
	MOV SI, FIELD

LOOP:
	CALL GET_RANDOM_NUMBER

	XOR DX, DX
	DIV BX 

	MOV DI, FIELD
	ADD DI, DX

	MOV AL, BYTE[SI]
	MOV AH, BYTE[DI]
	MOV BYTE[SI], AH
	MOV BYTE[DI], AL
	INC SI

	LOOP LOOP

PRINT:
	MOV AH, 0x01
	MOV CX, 40 * 24
	MOV SI, FIELD
	INT 0x80

	MOV AH, 0x08
	XOR BH, BH
	INT 0x10

	MOV WORD[PREVIOUS_ATTRIBUTE], AX

UPDATE_SELECTED:
	MOV AH, 0x09
	MOV AL, BYTE[PREVIOUS_ATTRIBUTE]
	MOV BL, BYTE[PREVIOUS_ATTRIBUTE + 1]
	AND BL, 0x0F
	OR BL, SELECTED_ATTRIBUTE
	XOR BH, BH
	MOV CX, 1
	INT 0x10

GET_KEY:
	XOR AH, AH
	INT 0x16

	OR AL, 0x20

	MOV DX, WORD[CURSOR_POSITION]

	CMP AL, 'a'
	JE MOVE_LEFT

	CMP AL, 'd'
	JE MOVE_RIGHT

	CMP AL, 'w'
	JE MOVE_UP

	CMP AL, 's'
	JE MOVE_DOWN

	CMP AL, 'f'
	JE PLACE_FLAG

	CMP AX, 0x013B
	JE EXIT

	JMP GET_KEY

MOVE_LEFT:
	TEST DL, DL
	JZ GET_KEY

	DEC DL
	JMP MOVE_CURSOR

MOVE_RIGHT:
	CMP DL, 39
	JAE GET_KEY

	INC DL
	JMP MOVE_CURSOR

MOVE_UP:
	TEST DH, DH
	JZ GET_KEY

	DEC DH
	JMP MOVE_CURSOR

MOVE_DOWN:
	CMP DH, 24
	JAE GET_KEY

	INC DH

MOVE_CURSOR:
	MOV AH, 0x09
	XOR BH, BH
	MOV AL, BYTE[PREVIOUS_ATTRIBUTE]
	MOV BL, BYTE[PREVIOUS_ATTRIBUTE + 1]
	MOV CX, 1
	INT 0x10

	MOV AH, 0x02
	INT 0x10

	MOV WORD[CURSOR_POSITION], DX

	MOV AH, 0x08
	INT 0x10

	MOV WORD[PREVIOUS_ATTRIBUTE], AX

	JMP UPDATE_SELECTED 

PLACE_FLAG:
	MOV AH, 0x09
	MOV AL, 0xD5
	MOV BL, (SELECTED_ATTRIBUTE & 0xF0) | 0x04
	MOV CX, 1
	INT 0x10

	MOV AH, BYTE[PREVIOUS_ATTRIBUTE + 1]
	AND AH, 0xF0
	AND BL, 0x0F
	OR AH, BL
	MOV WORD[PREVIOUS_ATTRIBUTE], AX
	
	JMP GET_KEY

EXIT:
	MOV AX, 0x0003
	INT 0x10

	XOR AH, AH
	INT 0x80

; Generates a pseudorandom number.
; AX -> A pseudorandom number.
GET_RANDOM_NUMBER:
	PUSH CX
	PUSH DX
	XOR DX, DX

	MOV AX, WORD[SEED]
	MUL AX
	XCHG AH, AL

	PUSH AX
	MOV AH, 0x00
	INT 0x1A
	POP AX
	ADD AX, DX
	SUB AX, WORD[SEED]
	XCHG AH, AL

	MOV WORD[SEED], AX

	POP DX
	POP CX
	RET

; AL <- Value to set to.
; BX <- Location in memory
; CX <- Times to set to.
MEMSET:
	PUSH BX
	PUSH CX

.LOOP:
	MOV BYTE[BX], AL
	INC BX

	LOOP .LOOP

	POP CX
	POP BX
	RET

CURSOR_POSITION: DW 0
PREVIOUS_ATTRIBUTE: DW 0
SEED: DW 0
FIELD: TIMES MINE_AMOUNT DB '*'
FIELD_EMPTY_START:
