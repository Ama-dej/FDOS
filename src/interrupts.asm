; FDOS INTERRUPT (INT 0x20)
; -------------------------

DOS_INT:
	PUSH AX
	PUSH BX
	PUSH CX
	PUSH DX
	; PUSH SP
	PUSH BP
	PUSH SI
	PUSH DI

	PUSH DS
	PUSH ES

        PUSH BX
        PUSH DS

        MOV BX, DOS_SEGMENT
        MOV DS, BX

        MOV BYTE[INT_RET_CODE], 0x00

	MOV BL, AH
	XOR BH, BH
        SHL BX, 1
        ADD BX, INT_JUMP_TABLE
        MOV AX, WORD[BX]

        POP DS
        POP BX

        JMP AX 

%INCLUDE "src/exit_int.asm"
%INCLUDE "src/print_int.asm"
%INCLUDE "src/scan_int.asm"
%INCLUDE "src/printi_int.asm"
%INCLUDE "src/printh_int.asm"
%INCLUDE "src/readfile_int.asm"
%INCLUDE "src/writefile_int.asm"
%INCLUDE "src/change_directory_int.asm"
%INCLUDE "src/remove_entry_int.asm"
%INCLUDE "src/make_file_int.asm"
%INCLUDE "src/make_directory_int.asm"
%INCLUDE "src/copy_file_int.asm"
%INCLUDE "src/command_parameters_int.asm"
%INCLUDE "src/print_error_messages_int.asm"
%INCLUDE "src/dos_text_mode_int.asm"
%INCLUDE "src/graphics_mode_int.asm"
%INCLUDE "src/put_pixel_int.asm"

RET_WRITE_INT:
        ; PUSH ES

        XOR SI, SI
        MOV ES, SI
        MOV SI, WORD[INT_TEMP]

        MOV DX, WORD[FILE_SIZE_LOWER]
        MOV DI, WORD[FILE_SIZE_UPPER]
	MOV CX, WORD[IO_BYTES]
	ADD DX, CX
	ADC DI, 0

        CMP DI, WORD[ES:SI + 30]
        JB .POP
        JA .STORE

        CMP DX, WORD[ES:SI + 28]
        JB .POP

.STORE:
        MOV WORD[ES:SI + 30], DI
        MOV WORD[ES:SI + 28], DX

.POP:
        ; POP ES

	MOV DL, BYTE[DRIVE_NUMBER]
        CALL UPDATE_FS_WRITE_INT

	CALL RESTORE_WORKING_DIRECTORY
	JC INT_READ_ERROR

.EXIT:
        ; POP DS
	JMP RW_RET_INT
        ; JMP RET_CODE_INT

RW_RET_INT:
	POP ES
	POP DS

	POP DI
	POP SI
	POP BP
	; POP SP
	POP DX
	POP CX
	POP BX
	POP AX

	PUSH DS
	MOV CX, DOS_SEGMENT
	MOV DS, CX
	MOV AL, BYTE[INT_RET_CODE]
	MOV CX, WORD[IO_BYTES]
	POP DS
	IRET

RET_CODE_INT:
	POP ES
	POP DS

	POP DI
	POP SI
	POP BP
	; POP SP
	POP DX
	POP CX
	POP BX
	POP AX

        PUSH BX
        PUSH DS 
        MOV BX, DOS_SEGMENT
        MOV DS, BX
        MOV AL, BYTE[INT_RET_CODE]
        POP DS
        POP BX
        IRET

RET_INT:
	POP ES
	POP DS

	POP DI
	POP SI
	POP BP
	; POP SP
	POP DX
	POP CX
	POP BX
	POP AX

        IRET

INT_READ_ERROR:
	MOV BYTE[INT_RET_CODE], 0x01
	JMP RET_CODE_INT

INT_WRITE_ERROR:
	MOV BYTE[INT_RET_CODE], 0x02
	JMP RET_CODE_INT

INT_NOT_FOUND_ERROR:
	MOV BYTE[INT_RET_CODE], 0x03
	JMP RET_CODE_INT

INT_DIR_NOT_FOUND_ERROR:
	MOV BYTE[INT_RET_CODE], 0x04
	JMP RET_CODE_INT

INT_SYNTAX_ERROR:
	MOV BYTE[INT_RET_CODE], 0x05
	JMP RET_CODE_INT

INT_FILE_EXISTS_ERROR:
	MOV BYTE[INT_RET_CODE], 0x06
	JMP RET_CODE_INT

INT_FILE_NOT_DIR_ERROR:
	MOV BYTE[INT_RET_CODE], 0x07
	JMP RET_CODE_INT

INT_DIR_NOT_EMPTY_ERROR:
	MOV BYTE[INT_RET_CODE], 0x08
	JMP RET_CODE_INT

INT_OUT_OF_SPACE_ERROR:
	MOV BYTE[INT_RET_CODE], 0x09
	JMP RET_CODE_INT

INT_MAX_DIR_DEPTH:
	MOV BYTE[INT_RET_CODE], 0x0A
	JMP RET_CODE_INT

INT_RET_CODE: DB 0
INT_TEMP: DW 0
INT_TEMP_JUNIOR: DW 0
INT_FILENAME_BUFFER: TIMES 11 DB ' '

FILE_SIZE_LOWER: DW 0
FILE_SIZE_UPPER: DW 0
IO_BYTES: DW 0
INT_DIRECTORY_FIRST_SECTOR: DW 0
INT_DIRECTORY_SEGMENT: DW 0
INT_DIRECTORY_OFFSET: DW 0
INT_DIRECTORY_SIZE: DW 0

INT_JUMP_TABLE:
; Exit interrupt and print routines.
; ----------------------------------
EXIT_INT_ADDRESS: DW EXIT_INT
PRINT_INT_ADDRESS: DW PRINT_INT
SCAN_INT_ADDRESS: DW SCAN_INT
PRINTI_INT_ADDRESS: DW PRINTI_INT
PRINTH_INT_ADDRESS: DW PRINTH_INT
TIMES 11 DW RET_INT ; Space for more interrupts in the future.
; Filesystem routines.
; --------------------
READFILE_INT_ADDRESS: DW READFILE_INT
WRITEFILE_INT_ADDRESS: DW WRITEFILE_INT
CHANGE_DIRECTORY_INT_ADDRESS: DW CHANGE_DIRECTORY_INT
REMOVE_ENTRY_INT_ADDRESS: DW REMOVE_ENTRY_INT
MAKE_FILE_INT_ADDRESS: DW MAKE_FILE_INT
MAKE_DIRECTORY_INT_ADDRESS: DW MAKE_DIRECTORY_INT
COPY_FILE_INT_ADDRESS: DW COPY_FILE_INT
TIMES 9 DW RET_INT
; Other.
; ------
COMMAND_PARAMETERS_INT_ADDRESS: DW COMMAND_PARAMETERS_INT
PRINT_ERROR_MESSAGES_INT_ADDRESS: DW PRINT_ERROR_MESSAGES_INT
TIMES 14 DW RET_INT
; Graphics routines.
; ------------------
SET_DOS_TEST_MODE_INT_ADDRESS: DW DOS_TEXT_MODE_INT
SET_GRAPHICS_MODE_INT_ADDRESS: DW GRAPHICS_MODE_INT
PUT_PIXEL_INT_ADDRESS: DW PUT_PIXEL_INT
RETURN_FROM_INT_ADDRESS: TIMES 256 - ((RETURN_FROM_INT_ADDRESS - INT_JUMP_TABLE) / 2) DW RET_INT
INT_JUMP_TABLE_END:
